name: Review

on:
  pull_request:
    branches:
      - main
      - next

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules-build
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 15
      - name: Install dependencies
        run: npm ci
      - name: build
        run: npm run build
      - uses: actions/upload-artifact@v2
        with:
          name: built
          path: dist
          if-no-files-found: error
          retention-days: 7
  publish:
    runs-on: ubuntu-latest
    name: Publish
    needs: [build]
    outputs:
      sha: ${{ steps.gitVersion.outputs.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules-publish
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 15
      - name: Install dependencies
        run: npm ci --only=dev
      - uses: actions/download-artifact@v2
        with:
          name: built
          path: dist
      - name: Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release --dry-run
      - id: gitVersion
        uses: ./.github/actions/get-git-head
      - uses: actions/upload-artifact@v2
        with:
          name: published
          path: dist
          if-no-files-found: error
          retention-days: 7
  compile:
    runs-on: ${{ matrix.runner }}
    name: Compile
    needs: [build, publish]
    strategy:
      matrix:
        os: [windows, linux]
        arch: [x86, x64]
        type: [service, cli]
        include:
          - os: windows
            node: 12.9.1
            runner: windows-latest
          - os: linux
            node: 12.16.2
            runner: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules-compile
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 15
      - name: Install dependencies
        run: npm ci --production
      - uses: actions/download-artifact@v2
        with:
          name: published
          path: dist
      - uses: ./.github/actions/nexe-compile
        name: Compile ${{ matrix.type }} for ${{ matrix.os }} ${{ matrix.arch }}
        with:
          os: ${{ matrix.os }}
          arch: ${{ matrix.arch }}
          entrypoint: ${{ matrix.type }}
          node-version: ${{ matrix.node }}
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.os != 'windows' }}
        with:
          name: emapc-${{ matrix.type }}-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/${{ matrix.type }}/${{ matrix.os }}/emapc-${{ matrix.type }}-${{ matrix.os }}-${{ matrix.arch }}
          if-no-files-found: error
          retention-days: 7
      - uses: actions/upload-artifact@v2
        if: ${{ matrix.os == 'windows' }}
        with:
          name: emapc-${{ matrix.type }}-${{ matrix.os }}-${{ matrix.arch }}.exe
          path: bin/${{ matrix.type }}/${{ matrix.os }}/emapc-${{ matrix.type }}-${{ matrix.os }}-${{ matrix.arch }}.exe
          if-no-files-found: error
          retention-days: 7
  buildWinInstaller:
    runs-on: windows-latest
    name: Build Windows Installer
    needs: [compile]
    strategy:
      matrix:
        arch: [x64, x86]
    steps:
      - name: Fix git checkout line endings
        run: git config --global core.autocrlf input
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: emapc-service-windows-${{ matrix.arch }}.exe
          path: bin/service/windows
      - name: Write key file
        run: |
          $bytes = [Convert]::FromBase64String("${{ secrets.PFX_CERTIFICATE }}")
          [IO.File]::WriteAllBytes("emapc.pfx", $bytes)
      - name: Sign binaries
        run: |
          lib/signtool.exe sign /f emapc.pfx /p "${{ secrets.PFX_CERTIFICATE_PWD }}" /sha1 "${{ secrets.PFX_CERTIFICATE_SHA1 }}" /fd sha256 /d "emapc service" /t http://timestamp.globalsign.com/scripts/timstamp.dll /v bin/service/windows/emapc-service-windows-${{ matrix.arch }}.exe
          lib/signtool.exe sign /f emapc.pfx /p "${{ secrets.PFX_CERTIFICATE_PWD }}" /sha1 "${{ secrets.PFX_CERTIFICATE_SHA1 }}" /fd sha256 /d "pdftotext" /t http://timestamp.globalsign.com/scripts/timstamp.dll /v lib/pdftotext/win/pdftotext32.exe
          lib/signtool.exe sign /f emapc.pfx /p "${{ secrets.PFX_CERTIFICATE_PWD }}" /sha1 "${{ secrets.PFX_CERTIFICATE_SHA1 }}" /fd sha256 /d "pdftotext" /t http://timestamp.globalsign.com/scripts/timstamp.dll /v lib/pdftotext/win/pdftotext64.exe
          lib/signtool.exe sign /f emapc.pfx /p "${{ secrets.PFX_CERTIFICATE_PWD }}" /sha1 "${{ secrets.PFX_CERTIFICATE_SHA1 }}" /fd sha256 /d "nssm" /t http://timestamp.globalsign.com/scripts/timstamp.dll /v lib/nssm/nssm32.exe
          lib/signtool.exe sign /f emapc.pfx /p "${{ secrets.PFX_CERTIFICATE_PWD }}" /sha1 "${{ secrets.PFX_CERTIFICATE_SHA1 }}" /fd sha256 /d "nssm" /t http://timestamp.globalsign.com/scripts/timstamp.dll /v lib/nssm/nssm64.exe
      - name: Setup wix toolset
        uses: ./.github/actions/setup-wix-toolset
      - name: Preprocess and Compile WXS
        run: candle.exe -ext WixUtilExtension -dVersion="1.0.0" -arch $($env:ARCH) "WindowsServiceInstaller.wxs" -out WindowsServiceInstaller.wixobj
        env:
          ARCH: ${{ matrix.arch }}
      - name: Link and Bundle wixobj
        run: light.exe -ext WixUtilExtension "WindowsServiceInstaller.wixobj" -out emapc-windows-service-installer-${{ matrix.arch }}.msi
      - name: Sign installer
        run: lib/signtool.exe sign /f emapc.pfx /p "${{ secrets.PFX_CERTIFICATE_PWD }}" /sha1 "${{ secrets.PFX_CERTIFICATE_SHA1 }}" /fd sha256 /d "EinsatzMonitor Alarm PDF Converter" /t http://timestamp.globalsign.com/scripts/timstamp.dll /v emapc-windows-service-installer-${{ matrix.arch }}.msi
      - uses: actions/upload-artifact@v2
        with:
          name: emapc-windows-service-installer-${{ matrix.arch }}.msi
          path: emapc-windows-service-installer-${{ matrix.arch }}.msi
          if-no-files-found: error
          retention-days: 7
  buildLinuxInstaller:
    runs-on: ubuntu-latest
    name: Build Linux Installer
    needs: [compile, publish]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: gitVersion
        uses: ./.github/actions/get-git-head
      - name: Make installer
        run: ./makeInstaller.sh ${{ needs.publish.outputs.sha }} v1.0.0
      - uses: actions/upload-artifact@v2
        with:
          name: install-linuxx64.sh
          path: install-linuxx64.sh
          if-no-files-found: error
          retention-days: 7
      - uses: actions/upload-artifact@v2
        with:
          name: install-linuxx86.sh
          path: install-linuxx86.sh
          if-no-files-found: error
          retention-days: 7
  testWindowsService:
    runs-on: windows-latest
    name: Test windows service
    needs: [buildWinInstaller]
    steps:
      - name: Fix git checkout line endings
        run: git config --global core.autocrlf true
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v2
        with:
          name: emapc-windows-service-installer-x64.msi
      - name: Install service
        run: Start-Process msiexec.exe -Wait -ArgumentList "/I $PWD\emapc-windows-service-installer-x64.msi /passive /qn"
      - name: Copy input
        run: |
          Copy-Item ".\test\input\*" -Destination "$([environment]::getfolderpath('programfiles'))\EMAPC\input" -Recurse
          Start-Sleep -Seconds 30
      - name: Compare outputs test 1
        uses: ./.github/actions/pwsh-folder-compare
        with:
          expectedFolderPath: ".\\test\\expectedOutput\\test1"
          actualFolderPath: "$([environment]::getfolderpath('programfiles'))\\EMAPC\\output"
      - name: Clear output
        run: Remove-Item "$([environment]::getfolderpath('programfiles'))\EMAPC\output\*" -Force
      - name: Compare archive to input
        uses: ./.github/actions/pwsh-folder-compare
        with:
          expectedFolderPath: ".\\test\\input"
          actualFolderPath: "$([environment]::getfolderpath('programfiles'))\\EMAPC\\archive"
      - name: Clear archive
        run: Remove-Item "$([environment]::getfolderpath('programfiles'))\EMAPC\archive\*" -Force
      - name: Modify config
        run: |
          $configFilePath = "$([environment]::getfolderpath('programfiles'))/EMAPC/emapc.conf.yml"
          [System.Collections.ArrayList]$originalContent = (Get-Content $configFilePath)
          $originalContent.removeRange(9, 5)
          $originalContent | Out-File -encoding utf8 $configFilePath
          
          Start-Sleep -Seconds 30
          
          if (((Get-Service "EMAPC").Status) -ne "Running")
          {
            
            Get-Content $configFilePath
            Write-Host ""
            Write-Host "service.log"
            Get-Content "$([environment]::getfolderpath('programfiles'))/EMAPC/service.log" -Tail 5
            Write-Host ""
            Write-Host "service-error.log"
            Get-Content "$([environment]::getfolderpath('programfiles'))/EMAPC/service-error.log" -Tail 5
            
            Write-Host "Service not running after config change"
            exit 1
          }
      - name: Copy input
        run: |
          Copy-Item ".\test\input\*" -Destination "$([environment]::getfolderpath('programfiles'))\EMAPC\input" -Recurse
          Start-Sleep -Seconds 30
      - name: Compare outputs test 2
        uses: ./.github/actions/pwsh-folder-compare
        with:
          expectedFolderPath: ".\\test\\expectedOutput\\test2"
          actualFolderPath: "$([environment]::getfolderpath('programfiles'))\\EMAPC\\output"
      - name: Clear output
        run: Remove-Item "$([environment]::getfolderpath('programfiles'))\EMAPC\output\*" -Force
      - name: Modify config a lot
        run: |
          $configFilePath = "$([environment]::getfolderpath('programfiles'))/EMAPC/emapc.conf.yml"
          [System.Collections.ArrayList]$originalContent = (Get-Content $configFilePath)
          $originalContent.removeRange(0, 57)
          $originalContent | Out-File -encoding utf8 $configFilePath
          
          Start-Sleep -Seconds 30
          
          if (((Get-Service "EMAPC").Status) -ne "Stopped")
          {
            Get-Content $configFilePath
            Write-Host ""
            Write-Host "service.log"
            Get-Content "$([environment]::getfolderpath('programfiles'))/EMAPC/service.log" -Tail 5
            Write-Host ""
            Write-Host "service-error.log"
            Get-Content "$([environment]::getfolderpath('programfiles'))/EMAPC/service-error.log" -Tail 5
            
            Write-Host "Service did not stop on huge configuration change"
            exit 1
          }
      - name: Uninstall service
        run: |
          Start-Process msiexec.exe -Wait -ArgumentList "/X $PWD\emapc-windows-service-installer-x64.msi /passive /qn"
          
          If ( (Test-Path -Path "$([environment]::getfolderpath('programfiles'))/EMAPC") -Or (Get-Service "EMAPC" -ErrorAction SilentlyContinue) )
          {
            Write-Host "Service did not properly uninstall"
            exit 1
          }
